00:00 - 00:06: given an array of integers with n plus
00:02 - 00:09: one numbers in it ranging from 1 to n
00:06 - 00:12: there's only one repeated number in this
00:09 - 00:14: entire array how can you find it without
00:12 - 00:16: modifying the array and only using
00:14 - 00:18: constant extra space
00:16 - 00:20: [Music]
00:18 - 00:22: hi everyone and welcome to another mock
00:20 - 00:24: interview with exponent I'm here today
00:22 - 00:26: with Ahmad would you like to introduce
00:24 - 00:29: yourself before we get started
00:26 - 00:32: hello everyone I am Ahmad Khaled I'm a
00:29 - 00:33: software engineer at Google and yeah I'm
00:32 - 00:36: happy to hear
00:33 - 00:37: lovely happy to have you here as well
00:36 - 00:38: Ahmed
00:37 - 00:40: um so today we're doing a software
00:38 - 00:43: engineering interview question and the
00:40 - 00:45: question for you is given an array of
00:43 - 00:49: integers with n plus one numbers in it
00:45 - 00:51: ranging from 1 to n
00:49 - 00:54: um there's only one repeated number in
00:51 - 00:56: this entire array how can you find it
00:54 - 01:00: without modifying the array and only
00:56 - 01:03: using constant extra space
01:00 - 01:07: okay so the input for this question is
01:03 - 01:09: an array of integers starting from 1 to
01:07 - 01:12: n uh
01:09 - 01:16: and I'm required to return this element
01:12 - 01:17: that's repeated in this array right yes
01:16 - 01:19: exactly
01:17 - 01:21: okay
01:19 - 01:24: so what I'm thinking about is the Brute
01:21 - 01:26: Force solution which is I trading
01:24 - 01:28: through all the array two times the
01:26 - 01:31: first one is iterating through every
01:28 - 01:33: element and the second time is comparing
01:31 - 01:34: this element with all the other elements
01:33 - 01:36: in the array
01:34 - 01:38: and if we find the duplicate we can
01:36 - 01:41: return this value okay so first let's
01:38 - 01:44: start by creating the the method that we
01:41 - 01:47: will be using which is
01:44 - 01:47: mm-hmm
01:55 - 02:01: okay so we have the array and we will be
01:59 - 02:03: doing two for Loops the first one is
02:01 - 02:05: looping through all the elements in the
02:03 - 02:05: array
02:14 - 02:18: and inside this for Loop we will have
02:16 - 02:20: another for Loop iterating through all
02:18 - 02:22: the elements again in the array but
02:20 - 02:24: starting from this index because we
02:22 - 02:27: don't need to be repeating uh
02:24 - 02:27: comparisons more than one time
02:31 - 02:36: so we'll be starting from I plus one
02:38 - 02:41: until the end of the array
02:42 - 02:47: and if
02:45 - 02:50: the first element
02:47 - 02:53: is equal to the second element then we
02:50 - 02:53: found order
02:56 - 03:03: if not we will continue our for Loop and
03:00 - 03:05: if we finish the for Loop without
03:03 - 03:09: finding any element I believe we should
03:05 - 03:11: return some invalid uh value like
03:09 - 03:14: negative one for example but this
03:11 - 03:16: shouldn't be happening according to our
03:14 - 03:17: yeah
03:16 - 03:19: let's assume let's assume you always
03:17 - 03:22: have it for now and then yeah that's
03:19 - 03:22: that's not a problem
03:29 - 03:32: and here is
03:32 - 03:39: that we found the order
03:36 - 03:41: okay so this is the first solution and I
03:39 - 03:43: believe the time complexity here is N
03:41 - 03:47: squared because we have two for loops
03:43 - 03:49: and the space complexity is O is of 1
03:47 - 03:52: because we basically didn't use any
03:49 - 03:54: space yeah okay
03:52 - 03:56: um and then let's say if we want to
03:54 - 03:57: change the time complexity here and
03:56 - 03:59: improve it first of all what is the time
03:57 - 04:00: complexity right now and how would you
03:59 - 04:02: improve on it
04:00 - 04:05: well the time complexity right now is of
04:02 - 04:06: N squared we're in this length of the
04:05 - 04:09: array and
04:06 - 04:12: yeah it's not the best I think that the
04:09 - 04:14: second solution to improve the time
04:12 - 04:16: complexity is sorting the array and
04:14 - 04:18: comparing every element with the element
04:16 - 04:21: that's after it but this will only
04:18 - 04:23: increase the tank will improve the time
04:21 - 04:26: complexity to n log n
04:23 - 04:29: okay which is still not the best
04:26 - 04:32: solution I believe that we can reach the
04:29 - 04:34: linear time complexity with often okay I
04:32 - 04:35: see how would you could you implement
04:34 - 04:38: this for us
04:35 - 04:40: okay so first of all to to reach this I
04:38 - 04:43: believe the the easiest solution is to
04:40 - 04:45: use a set where we address through all
04:43 - 04:48: the elements and whenever we reach an
04:45 - 04:49: element we check if it exists in the in
04:48 - 04:51: the set
04:49 - 04:53: if it exists then it means that we
04:51 - 04:56: already found another one that's had the
04:53 - 04:59: same value if it doesn't exist we insert
04:56 - 05:01: it in the set to make sure that when we
04:59 - 05:04: find it again we know that it exists but
05:01 - 05:06: as you mentioned in the in the in the
05:04 - 05:09: problem that we can't use extra space
05:06 - 05:11: so here's the tricky part we already
05:09 - 05:14: know that the elements starting from one
05:11 - 05:17: to n so we can use the array itself as
05:14 - 05:20: accept or as
05:17 - 05:22: okay so how we will be doing this is
05:20 - 05:25: iterating through all the elements and
05:22 - 05:29: whenever we find an element we go to its
05:25 - 05:31: index or the index that that is equal to
05:29 - 05:34: its value and we mark this element as
05:31 - 05:37: visited by basically setting the value
05:34 - 05:39: as negative the value that exists right
05:37 - 05:43: now okay let's try that
05:39 - 05:45: okay so we will only have one for Loop
05:43 - 05:47: instead of two for those so let's remove
05:45 - 05:51: the second one
05:47 - 05:54: and for every element sorry
05:51 - 05:57: uh we will be checking its index so
05:54 - 05:57: first let's calculate the index
05:59 - 06:05: here the index needs to be the element
06:02 - 06:07: -1 but the element might be visited
06:05 - 06:09: before so it might have negative value
06:07 - 06:12: okay fix that we need to get the
06:09 - 06:12: absolute value for this energy
06:17 - 06:23: and since the elements from 1 to n but
06:20 - 06:27: the array is zero based index so we need
06:23 - 06:30: to subtract one to be from zero to n
06:27 - 06:30: minus one not from one time
06:33 - 06:40: so this is our index so first we check
06:37 - 06:43: is this assuming that all the numbers in
06:40 - 06:45: this array are in a given order
06:43 - 06:48: it doesn't have to be in a given order
06:45 - 06:48: it can be in any order
06:50 - 06:56: so if this index is listed less than
06:54 - 07:00: zero then we know that we visited this
06:56 - 07:00: element before okay
07:00 - 07:03: foreign
07:23 - 07:28: okay so here I trade through every
07:25 - 07:29: element we calculate the corresponding
07:28 - 07:32: index which is like using the hash
07:29 - 07:34: function and for this index we check if
07:32 - 07:37: we visited this element before or not if
07:34 - 07:40: we visited it so it's a duplicate if we
07:37 - 07:42: didn't so we mark it as visited okay can
07:40 - 07:44: we try testing this code and seeing how
07:42 - 07:47: we can use it
07:44 - 07:47: Okay so
07:51 - 07:54: we can have an example
08:07 - 08:12: let's start with a simple one okay but
08:11 - 08:14: to use this function inside the main
08:12 - 08:17: since the mean is Statics through it had
08:14 - 08:20: to be also study
08:17 - 08:20: friends
08:43 - 08:49: okay so here we have an array that has
08:46 - 08:51: values from one to n where n is four
08:49 - 08:52: since we have four values
08:51 - 08:56: uh
08:52 - 08:59: and the duplicate here is obviously two
08:56 - 08:59: so let's try to run it
09:02 - 09:06: so the duplicate is found and there are
09:04 - 09:08: some edge cases for example if we have
09:06 - 09:10: this duplicate but for multiple times
09:08 - 09:12: for example if
09:10 - 09:14: it's like this
09:12 - 09:16: so here we only have one duplicate value
09:14 - 09:18: but it's duplicated for more than two
09:16 - 09:20: times yeah and I believe it will also
09:18 - 09:20: work
09:21 - 09:26: yeah
09:23 - 09:27: okay sounds good all right I think this
09:26 - 09:30: looks good all right I think this looks
09:27 - 09:32: good thank you Ahmed that was great do
09:30 - 09:33: you have any suggestions for you know
09:32 - 09:35: how how people should tackle questions
09:33 - 09:36: like these when they see them have you
09:35 - 09:37: ever gotten stuck on a question like
09:36 - 09:41: this in an interview and what was your
09:37 - 09:44: strategy around it well I think the the
09:41 - 09:47: thing that people mostly get stuck on is
09:44 - 09:49: starting with the optimal solution
09:47 - 09:51: and I believe this is not the right
09:49 - 09:53: strategy to have there are strategy to
09:51 - 09:57: have is to start with the brute force
09:53 - 09:59: and try to improve it not starting with
09:57 - 10:00: the optimal yeah that's right you always
09:59 - 10:02: want something yeah that's fair you
10:00 - 10:04: always want something on the board um
10:02 - 10:05: rather than nothing and no no complete
10:04 - 10:08: solution before the end of that
10:05 - 10:10: interview exactly you can write some
10:08 - 10:12: code to see how good you can write the
10:10 - 10:14: code yeah exactly thank you very much
10:12 - 10:16: Ahmed we really appreciate having you
10:14 - 10:18: here today
10:16 - 10:20: thanks so much for watching don't forget
10:18 - 10:22: to hit the like And subscribe buttons
10:20 - 10:24: below to let us know that this video is
10:22 - 10:27: valuable for you and of course check out
10:24 - 10:29: hundreds more videos just like this at
10:27 - 10:31: try exponent.com
10:29 - 10:33: thanks for watching and good luck on
10:31 - 10:33: your upcoming interview
10:36 - 10:41: [Music]
